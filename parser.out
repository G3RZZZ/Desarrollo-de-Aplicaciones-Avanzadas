Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    SEMI

Grammar

Rule 0     S' -> top_level
Rule 1     top_level -> top_level_expr
Rule 2     top_level -> top_level_expr top_level
Rule 3     top_level_expr -> assignment newline
Rule 4     top_level_expr -> function_definition newline
Rule 5     top_level_expr -> expression newline
Rule 6     assignment -> VARIABLE SETTO expression
Rule 7     assignment -> VARIABLE SETTO flow
Rule 8     flow -> VARIABLE CONNECT flow_functions
Rule 9     flow_functions -> flow_function_call CONNECT flow_functions
Rule 10    flow_functions -> flow_function_call
Rule 11    flow_function_call -> VARIABLE DOT LPAREN params RPAREN
Rule 12    assignment -> expression
Rule 13    expression -> expression PLUS term
Rule 14    expression -> expression MINUS term
Rule 15    expression -> term
Rule 16    expression -> string
Rule 17    string -> STRING
Rule 18    term -> term TIMES exponent
Rule 19    term -> term DIVIDE exponent
Rule 20    term -> exponent
Rule 21    exponent -> factor EXP factor
Rule 22    exponent -> factor
Rule 23    exponent -> LPAREN expression RPAREN
Rule 24    factor -> NUMBER
Rule 25    factor -> VARIABLE
Rule 26    factor -> function_call
Rule 27    function_call -> VARIABLE DOT LPAREN RPAREN
Rule 28    function_call -> VARIABLE DOT LPAREN params RPAREN
Rule 29    params -> params COMMA expression
Rule 30    params -> expression
Rule 31    function_definition -> VARIABLE LPAREN args RPAREN LBRACE newline statements newline RBRACE
Rule 32    statements -> statement
Rule 33    statements -> statements newline statement
Rule 34    statement -> assignment
Rule 35    empty -> <empty>
Rule 36    args -> VARIABLE COMMA args
Rule 37    args -> VARIABLE
Rule 38    args -> empty

Terminals, with rules where they appear

COMMA                : 29 36
CONNECT              : 8 9
DIVIDE               : 19
DOT                  : 11 27 28
EXP                  : 21
FUNCTION             : 
LBRACE               : 31
LPAREN               : 11 23 27 28 31
MINUS                : 14
NUMBER               : 24
PLUS                 : 13
RBRACE               : 31
RPAREN               : 11 23 27 28 31
SEMI                 : 
SETTO                : 6 7
STRING               : 17
TIMES                : 18
VARIABLE             : 6 7 8 11 25 27 28 31 36 37
error                : 
newline              : 3 4 5 31 31 33

Nonterminals, with rules where they appear

args                 : 31 36
assignment           : 3 34
empty                : 38
exponent             : 18 19 20
expression           : 5 6 12 13 14 23 29 30
factor               : 21 21 22
flow                 : 7
flow_function_call   : 9 10
flow_functions       : 8 9
function_call        : 26
function_definition  : 4
params               : 11 28 29
statement            : 32 33
statements           : 31 33
string               : 16
term                 : 13 14 15 18 19
top_level            : 2 0
top_level_expr       : 1 2

Parsing method: LALR

state 0

    (0) S' -> . top_level
    (1) top_level -> . top_level_expr
    (2) top_level -> . top_level_expr top_level
    (3) top_level_expr -> . assignment newline
    (4) top_level_expr -> . function_definition newline
    (5) top_level_expr -> . expression newline
    (6) assignment -> . VARIABLE SETTO expression
    (7) assignment -> . VARIABLE SETTO flow
    (12) assignment -> . expression
    (31) function_definition -> . VARIABLE LPAREN args RPAREN LBRACE newline statements newline RBRACE
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    VARIABLE        shift and go to state 6
    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13

    top_level                      shift and go to state 1
    top_level_expr                 shift and go to state 2
    assignment                     shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 1

    (0) S' -> top_level .



state 2

    (1) top_level -> top_level_expr .
    (2) top_level -> top_level_expr . top_level
    (1) top_level -> . top_level_expr
    (2) top_level -> . top_level_expr top_level
    (3) top_level_expr -> . assignment newline
    (4) top_level_expr -> . function_definition newline
    (5) top_level_expr -> . expression newline
    (6) assignment -> . VARIABLE SETTO expression
    (7) assignment -> . VARIABLE SETTO flow
    (12) assignment -> . expression
    (31) function_definition -> . VARIABLE LPAREN args RPAREN LBRACE newline statements newline RBRACE
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    $end            reduce using rule 1 (top_level -> top_level_expr .)
    VARIABLE        shift and go to state 6
    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13

    top_level_expr                 shift and go to state 2
    top_level                      shift and go to state 15
    assignment                     shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 3

    (3) top_level_expr -> assignment . newline

    newline         shift and go to state 16


state 4

    (4) top_level_expr -> function_definition . newline

    newline         shift and go to state 17


state 5

    (5) top_level_expr -> expression . newline
    (12) assignment -> expression .
    (13) expression -> expression . PLUS term
    (14) expression -> expression . MINUS term

  ! shift/reduce conflict for newline resolved as shift
    newline         shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20

  ! newline         [ reduce using rule 12 (assignment -> expression .) ]


state 6

    (6) assignment -> VARIABLE . SETTO expression
    (7) assignment -> VARIABLE . SETTO flow
    (31) function_definition -> VARIABLE . LPAREN args RPAREN LBRACE newline statements newline RBRACE
    (25) factor -> VARIABLE .
    (27) function_call -> VARIABLE . DOT LPAREN RPAREN
    (28) function_call -> VARIABLE . DOT LPAREN params RPAREN

    SETTO           shift and go to state 21
    LPAREN          shift and go to state 22
    EXP             reduce using rule 25 (factor -> VARIABLE .)
    TIMES           reduce using rule 25 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 25 (factor -> VARIABLE .)
    newline         reduce using rule 25 (factor -> VARIABLE .)
    PLUS            reduce using rule 25 (factor -> VARIABLE .)
    MINUS           reduce using rule 25 (factor -> VARIABLE .)
    DOT             shift and go to state 23


state 7

    (23) exponent -> LPAREN . expression RPAREN
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    expression                     shift and go to state 24
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 8

    (15) expression -> term .
    (18) term -> term . TIMES exponent
    (19) term -> term . DIVIDE exponent

    newline         reduce using rule 15 (expression -> term .)
    PLUS            reduce using rule 15 (expression -> term .)
    MINUS           reduce using rule 15 (expression -> term .)
    RPAREN          reduce using rule 15 (expression -> term .)
    COMMA           reduce using rule 15 (expression -> term .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 9

    (16) expression -> string .

    newline         reduce using rule 16 (expression -> string .)
    PLUS            reduce using rule 16 (expression -> string .)
    MINUS           reduce using rule 16 (expression -> string .)
    RPAREN          reduce using rule 16 (expression -> string .)
    COMMA           reduce using rule 16 (expression -> string .)


state 10

    (20) term -> exponent .

    TIMES           reduce using rule 20 (term -> exponent .)
    DIVIDE          reduce using rule 20 (term -> exponent .)
    newline         reduce using rule 20 (term -> exponent .)
    PLUS            reduce using rule 20 (term -> exponent .)
    MINUS           reduce using rule 20 (term -> exponent .)
    RPAREN          reduce using rule 20 (term -> exponent .)
    COMMA           reduce using rule 20 (term -> exponent .)


state 11

    (17) string -> STRING .

    newline         reduce using rule 17 (string -> STRING .)
    PLUS            reduce using rule 17 (string -> STRING .)
    MINUS           reduce using rule 17 (string -> STRING .)
    RPAREN          reduce using rule 17 (string -> STRING .)
    COMMA           reduce using rule 17 (string -> STRING .)


state 12

    (21) exponent -> factor . EXP factor
    (22) exponent -> factor .

    EXP             shift and go to state 28
    TIMES           reduce using rule 22 (exponent -> factor .)
    DIVIDE          reduce using rule 22 (exponent -> factor .)
    newline         reduce using rule 22 (exponent -> factor .)
    PLUS            reduce using rule 22 (exponent -> factor .)
    MINUS           reduce using rule 22 (exponent -> factor .)
    RPAREN          reduce using rule 22 (exponent -> factor .)
    COMMA           reduce using rule 22 (exponent -> factor .)


state 13

    (24) factor -> NUMBER .

    EXP             reduce using rule 24 (factor -> NUMBER .)
    TIMES           reduce using rule 24 (factor -> NUMBER .)
    DIVIDE          reduce using rule 24 (factor -> NUMBER .)
    newline         reduce using rule 24 (factor -> NUMBER .)
    PLUS            reduce using rule 24 (factor -> NUMBER .)
    MINUS           reduce using rule 24 (factor -> NUMBER .)
    RPAREN          reduce using rule 24 (factor -> NUMBER .)
    COMMA           reduce using rule 24 (factor -> NUMBER .)


state 14

    (26) factor -> function_call .

    EXP             reduce using rule 26 (factor -> function_call .)
    TIMES           reduce using rule 26 (factor -> function_call .)
    DIVIDE          reduce using rule 26 (factor -> function_call .)
    newline         reduce using rule 26 (factor -> function_call .)
    PLUS            reduce using rule 26 (factor -> function_call .)
    MINUS           reduce using rule 26 (factor -> function_call .)
    RPAREN          reduce using rule 26 (factor -> function_call .)
    COMMA           reduce using rule 26 (factor -> function_call .)


state 15

    (2) top_level -> top_level_expr top_level .

    $end            reduce using rule 2 (top_level -> top_level_expr top_level .)


state 16

    (3) top_level_expr -> assignment newline .

    VARIABLE        reduce using rule 3 (top_level_expr -> assignment newline .)
    STRING          reduce using rule 3 (top_level_expr -> assignment newline .)
    LPAREN          reduce using rule 3 (top_level_expr -> assignment newline .)
    NUMBER          reduce using rule 3 (top_level_expr -> assignment newline .)
    $end            reduce using rule 3 (top_level_expr -> assignment newline .)


state 17

    (4) top_level_expr -> function_definition newline .

    VARIABLE        reduce using rule 4 (top_level_expr -> function_definition newline .)
    STRING          reduce using rule 4 (top_level_expr -> function_definition newline .)
    LPAREN          reduce using rule 4 (top_level_expr -> function_definition newline .)
    NUMBER          reduce using rule 4 (top_level_expr -> function_definition newline .)
    $end            reduce using rule 4 (top_level_expr -> function_definition newline .)


state 18

    (5) top_level_expr -> expression newline .

    VARIABLE        reduce using rule 5 (top_level_expr -> expression newline .)
    STRING          reduce using rule 5 (top_level_expr -> expression newline .)
    LPAREN          reduce using rule 5 (top_level_expr -> expression newline .)
    NUMBER          reduce using rule 5 (top_level_expr -> expression newline .)
    $end            reduce using rule 5 (top_level_expr -> expression newline .)


state 19

    (13) expression -> expression PLUS . term
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    term                           shift and go to state 29
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 20

    (14) expression -> expression MINUS . term
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    term                           shift and go to state 30
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 21

    (6) assignment -> VARIABLE SETTO . expression
    (7) assignment -> VARIABLE SETTO . flow
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (8) flow -> . VARIABLE CONNECT flow_functions
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    VARIABLE        shift and go to state 31
    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13

    expression                     shift and go to state 32
    flow                           shift and go to state 33
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 22

    (31) function_definition -> VARIABLE LPAREN . args RPAREN LBRACE newline statements newline RBRACE
    (36) args -> . VARIABLE COMMA args
    (37) args -> . VARIABLE
    (38) args -> . empty
    (35) empty -> .

    VARIABLE        shift and go to state 34
    RPAREN          reduce using rule 35 (empty -> .)

    args                           shift and go to state 35
    empty                          shift and go to state 36

state 23

    (27) function_call -> VARIABLE DOT . LPAREN RPAREN
    (28) function_call -> VARIABLE DOT . LPAREN params RPAREN

    LPAREN          shift and go to state 37


state 24

    (23) exponent -> LPAREN expression . RPAREN
    (13) expression -> expression . PLUS term
    (14) expression -> expression . MINUS term

    RPAREN          shift and go to state 38
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 25

    (25) factor -> VARIABLE .
    (27) function_call -> VARIABLE . DOT LPAREN RPAREN
    (28) function_call -> VARIABLE . DOT LPAREN params RPAREN

    EXP             reduce using rule 25 (factor -> VARIABLE .)
    TIMES           reduce using rule 25 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 25 (factor -> VARIABLE .)
    RPAREN          reduce using rule 25 (factor -> VARIABLE .)
    PLUS            reduce using rule 25 (factor -> VARIABLE .)
    MINUS           reduce using rule 25 (factor -> VARIABLE .)
    newline         reduce using rule 25 (factor -> VARIABLE .)
    COMMA           reduce using rule 25 (factor -> VARIABLE .)
    DOT             shift and go to state 23


state 26

    (18) term -> term TIMES . exponent
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    exponent                       shift and go to state 39
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 27

    (19) term -> term DIVIDE . exponent
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    exponent                       shift and go to state 40
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 28

    (21) exponent -> factor EXP . factor
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    factor                         shift and go to state 41
    function_call                  shift and go to state 14

state 29

    (13) expression -> expression PLUS term .
    (18) term -> term . TIMES exponent
    (19) term -> term . DIVIDE exponent

    newline         reduce using rule 13 (expression -> expression PLUS term .)
    PLUS            reduce using rule 13 (expression -> expression PLUS term .)
    MINUS           reduce using rule 13 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS term .)
    COMMA           reduce using rule 13 (expression -> expression PLUS term .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 30

    (14) expression -> expression MINUS term .
    (18) term -> term . TIMES exponent
    (19) term -> term . DIVIDE exponent

    newline         reduce using rule 14 (expression -> expression MINUS term .)
    PLUS            reduce using rule 14 (expression -> expression MINUS term .)
    MINUS           reduce using rule 14 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS term .)
    COMMA           reduce using rule 14 (expression -> expression MINUS term .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 31

    (8) flow -> VARIABLE . CONNECT flow_functions
    (25) factor -> VARIABLE .
    (27) function_call -> VARIABLE . DOT LPAREN RPAREN
    (28) function_call -> VARIABLE . DOT LPAREN params RPAREN

    CONNECT         shift and go to state 42
    EXP             reduce using rule 25 (factor -> VARIABLE .)
    TIMES           reduce using rule 25 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 25 (factor -> VARIABLE .)
    PLUS            reduce using rule 25 (factor -> VARIABLE .)
    MINUS           reduce using rule 25 (factor -> VARIABLE .)
    newline         reduce using rule 25 (factor -> VARIABLE .)
    DOT             shift and go to state 23


state 32

    (6) assignment -> VARIABLE SETTO expression .
    (13) expression -> expression . PLUS term
    (14) expression -> expression . MINUS term

    newline         reduce using rule 6 (assignment -> VARIABLE SETTO expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 33

    (7) assignment -> VARIABLE SETTO flow .

    newline         reduce using rule 7 (assignment -> VARIABLE SETTO flow .)


state 34

    (36) args -> VARIABLE . COMMA args
    (37) args -> VARIABLE .

    COMMA           shift and go to state 43
    RPAREN          reduce using rule 37 (args -> VARIABLE .)


state 35

    (31) function_definition -> VARIABLE LPAREN args . RPAREN LBRACE newline statements newline RBRACE

    RPAREN          shift and go to state 44


state 36

    (38) args -> empty .

    RPAREN          reduce using rule 38 (args -> empty .)


state 37

    (27) function_call -> VARIABLE DOT LPAREN . RPAREN
    (28) function_call -> VARIABLE DOT LPAREN . params RPAREN
    (29) params -> . params COMMA expression
    (30) params -> . expression
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    RPAREN          shift and go to state 45
    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    params                         shift and go to state 46
    expression                     shift and go to state 47
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 38

    (23) exponent -> LPAREN expression RPAREN .

    TIMES           reduce using rule 23 (exponent -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 23 (exponent -> LPAREN expression RPAREN .)
    newline         reduce using rule 23 (exponent -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 23 (exponent -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 23 (exponent -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 23 (exponent -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 23 (exponent -> LPAREN expression RPAREN .)


state 39

    (18) term -> term TIMES exponent .

    TIMES           reduce using rule 18 (term -> term TIMES exponent .)
    DIVIDE          reduce using rule 18 (term -> term TIMES exponent .)
    newline         reduce using rule 18 (term -> term TIMES exponent .)
    PLUS            reduce using rule 18 (term -> term TIMES exponent .)
    MINUS           reduce using rule 18 (term -> term TIMES exponent .)
    RPAREN          reduce using rule 18 (term -> term TIMES exponent .)
    COMMA           reduce using rule 18 (term -> term TIMES exponent .)


state 40

    (19) term -> term DIVIDE exponent .

    TIMES           reduce using rule 19 (term -> term DIVIDE exponent .)
    DIVIDE          reduce using rule 19 (term -> term DIVIDE exponent .)
    newline         reduce using rule 19 (term -> term DIVIDE exponent .)
    PLUS            reduce using rule 19 (term -> term DIVIDE exponent .)
    MINUS           reduce using rule 19 (term -> term DIVIDE exponent .)
    RPAREN          reduce using rule 19 (term -> term DIVIDE exponent .)
    COMMA           reduce using rule 19 (term -> term DIVIDE exponent .)


state 41

    (21) exponent -> factor EXP factor .

    TIMES           reduce using rule 21 (exponent -> factor EXP factor .)
    DIVIDE          reduce using rule 21 (exponent -> factor EXP factor .)
    newline         reduce using rule 21 (exponent -> factor EXP factor .)
    PLUS            reduce using rule 21 (exponent -> factor EXP factor .)
    MINUS           reduce using rule 21 (exponent -> factor EXP factor .)
    RPAREN          reduce using rule 21 (exponent -> factor EXP factor .)
    COMMA           reduce using rule 21 (exponent -> factor EXP factor .)


state 42

    (8) flow -> VARIABLE CONNECT . flow_functions
    (9) flow_functions -> . flow_function_call CONNECT flow_functions
    (10) flow_functions -> . flow_function_call
    (11) flow_function_call -> . VARIABLE DOT LPAREN params RPAREN

    VARIABLE        shift and go to state 48

    flow_functions                 shift and go to state 49
    flow_function_call             shift and go to state 50

state 43

    (36) args -> VARIABLE COMMA . args
    (36) args -> . VARIABLE COMMA args
    (37) args -> . VARIABLE
    (38) args -> . empty
    (35) empty -> .

    VARIABLE        shift and go to state 34
    RPAREN          reduce using rule 35 (empty -> .)

    args                           shift and go to state 51
    empty                          shift and go to state 36

state 44

    (31) function_definition -> VARIABLE LPAREN args RPAREN . LBRACE newline statements newline RBRACE

    LBRACE          shift and go to state 52


state 45

    (27) function_call -> VARIABLE DOT LPAREN RPAREN .

    EXP             reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    TIMES           reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    DIVIDE          reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    newline         reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    PLUS            reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    MINUS           reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    RPAREN          reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)
    COMMA           reduce using rule 27 (function_call -> VARIABLE DOT LPAREN RPAREN .)


state 46

    (28) function_call -> VARIABLE DOT LPAREN params . RPAREN
    (29) params -> params . COMMA expression

    RPAREN          shift and go to state 53
    COMMA           shift and go to state 54


state 47

    (30) params -> expression .
    (13) expression -> expression . PLUS term
    (14) expression -> expression . MINUS term

    RPAREN          reduce using rule 30 (params -> expression .)
    COMMA           reduce using rule 30 (params -> expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 48

    (11) flow_function_call -> VARIABLE . DOT LPAREN params RPAREN

    DOT             shift and go to state 55


state 49

    (8) flow -> VARIABLE CONNECT flow_functions .

    newline         reduce using rule 8 (flow -> VARIABLE CONNECT flow_functions .)


state 50

    (9) flow_functions -> flow_function_call . CONNECT flow_functions
    (10) flow_functions -> flow_function_call .

    CONNECT         shift and go to state 56
    newline         reduce using rule 10 (flow_functions -> flow_function_call .)


state 51

    (36) args -> VARIABLE COMMA args .

    RPAREN          reduce using rule 36 (args -> VARIABLE COMMA args .)


state 52

    (31) function_definition -> VARIABLE LPAREN args RPAREN LBRACE . newline statements newline RBRACE

    newline         shift and go to state 57


state 53

    (28) function_call -> VARIABLE DOT LPAREN params RPAREN .

    EXP             reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    TIMES           reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    DIVIDE          reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    newline         reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    PLUS            reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    MINUS           reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    RPAREN          reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)
    COMMA           reduce using rule 28 (function_call -> VARIABLE DOT LPAREN params RPAREN .)


state 54

    (29) params -> params COMMA . expression
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    expression                     shift and go to state 58
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 55

    (11) flow_function_call -> VARIABLE DOT . LPAREN params RPAREN

    LPAREN          shift and go to state 59


state 56

    (9) flow_functions -> flow_function_call CONNECT . flow_functions
    (9) flow_functions -> . flow_function_call CONNECT flow_functions
    (10) flow_functions -> . flow_function_call
    (11) flow_function_call -> . VARIABLE DOT LPAREN params RPAREN

    VARIABLE        shift and go to state 48

    flow_function_call             shift and go to state 50
    flow_functions                 shift and go to state 60

state 57

    (31) function_definition -> VARIABLE LPAREN args RPAREN LBRACE newline . statements newline RBRACE
    (32) statements -> . statement
    (33) statements -> . statements newline statement
    (34) statement -> . assignment
    (6) assignment -> . VARIABLE SETTO expression
    (7) assignment -> . VARIABLE SETTO flow
    (12) assignment -> . expression
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    VARIABLE        shift and go to state 61
    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13

    statements                     shift and go to state 62
    statement                      shift and go to state 63
    assignment                     shift and go to state 64
    expression                     shift and go to state 65
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 58

    (29) params -> params COMMA expression .
    (13) expression -> expression . PLUS term
    (14) expression -> expression . MINUS term

    RPAREN          reduce using rule 29 (params -> params COMMA expression .)
    COMMA           reduce using rule 29 (params -> params COMMA expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 59

    (11) flow_function_call -> VARIABLE DOT LPAREN . params RPAREN
    (29) params -> . params COMMA expression
    (30) params -> . expression
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 25

    params                         shift and go to state 66
    expression                     shift and go to state 47
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 60

    (9) flow_functions -> flow_function_call CONNECT flow_functions .

    newline         reduce using rule 9 (flow_functions -> flow_function_call CONNECT flow_functions .)


state 61

    (6) assignment -> VARIABLE . SETTO expression
    (7) assignment -> VARIABLE . SETTO flow
    (25) factor -> VARIABLE .
    (27) function_call -> VARIABLE . DOT LPAREN RPAREN
    (28) function_call -> VARIABLE . DOT LPAREN params RPAREN

    SETTO           shift and go to state 21
    EXP             reduce using rule 25 (factor -> VARIABLE .)
    TIMES           reduce using rule 25 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 25 (factor -> VARIABLE .)
    PLUS            reduce using rule 25 (factor -> VARIABLE .)
    MINUS           reduce using rule 25 (factor -> VARIABLE .)
    newline         reduce using rule 25 (factor -> VARIABLE .)
    DOT             shift and go to state 23


state 62

    (31) function_definition -> VARIABLE LPAREN args RPAREN LBRACE newline statements . newline RBRACE
    (33) statements -> statements . newline statement

    newline         shift and go to state 67


state 63

    (32) statements -> statement .

    newline         reduce using rule 32 (statements -> statement .)


state 64

    (34) statement -> assignment .

    newline         reduce using rule 34 (statement -> assignment .)


state 65

    (12) assignment -> expression .
    (13) expression -> expression . PLUS term
    (14) expression -> expression . MINUS term

    newline         reduce using rule 12 (assignment -> expression .)
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 66

    (11) flow_function_call -> VARIABLE DOT LPAREN params . RPAREN
    (29) params -> params . COMMA expression

    RPAREN          shift and go to state 68
    COMMA           shift and go to state 54


state 67

    (31) function_definition -> VARIABLE LPAREN args RPAREN LBRACE newline statements newline . RBRACE
    (33) statements -> statements newline . statement
    (34) statement -> . assignment
    (6) assignment -> . VARIABLE SETTO expression
    (7) assignment -> . VARIABLE SETTO flow
    (12) assignment -> . expression
    (13) expression -> . expression PLUS term
    (14) expression -> . expression MINUS term
    (15) expression -> . term
    (16) expression -> . string
    (18) term -> . term TIMES exponent
    (19) term -> . term DIVIDE exponent
    (20) term -> . exponent
    (17) string -> . STRING
    (21) exponent -> . factor EXP factor
    (22) exponent -> . factor
    (23) exponent -> . LPAREN expression RPAREN
    (24) factor -> . NUMBER
    (25) factor -> . VARIABLE
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE DOT LPAREN RPAREN
    (28) function_call -> . VARIABLE DOT LPAREN params RPAREN

    RBRACE          shift and go to state 69
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 11
    LPAREN          shift and go to state 7
    NUMBER          shift and go to state 13

    statement                      shift and go to state 70
    assignment                     shift and go to state 64
    expression                     shift and go to state 65
    term                           shift and go to state 8
    string                         shift and go to state 9
    exponent                       shift and go to state 10
    factor                         shift and go to state 12
    function_call                  shift and go to state 14

state 68

    (11) flow_function_call -> VARIABLE DOT LPAREN params RPAREN .

    CONNECT         reduce using rule 11 (flow_function_call -> VARIABLE DOT LPAREN params RPAREN .)
    newline         reduce using rule 11 (flow_function_call -> VARIABLE DOT LPAREN params RPAREN .)


state 69

    (31) function_definition -> VARIABLE LPAREN args RPAREN LBRACE newline statements newline RBRACE .

    newline         reduce using rule 31 (function_definition -> VARIABLE LPAREN args RPAREN LBRACE newline statements newline RBRACE .)


state 70

    (33) statements -> statements newline statement .

    newline         reduce using rule 33 (statements -> statements newline statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for newline in state 5 resolved as shift
