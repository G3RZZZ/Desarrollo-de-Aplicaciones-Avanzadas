Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> VARIABLE SETTO expression
Rule 2     assignment -> VARIABLE SETTO list
Rule 3     assignment -> VARIABLE SETTO flow
Rule 4     flow -> VARIABLE CONNECT flow_functions
Rule 5     flow_functions -> flow_function_call CONNECT flow_functions
Rule 6     flow_functions -> flow_function_call
Rule 7     flow_function_call -> VARIABLE LPAREN params RPAREN
Rule 8     assignment -> expression
Rule 9     expression -> expression PLUS term
Rule 10    expression -> expression MINUS term
Rule 11    expression -> term
Rule 12    expression -> string
Rule 13    string -> STRING
Rule 14    term -> term TIMES exponent
Rule 15    term -> term DIVIDE exponent
Rule 16    term -> exponent
Rule 17    exponent -> factor EXP factor
Rule 18    exponent -> factor
Rule 19    exponent -> LPAREN expression RPAREN
Rule 20    factor -> NUMBER
Rule 21    factor -> VARIABLE
Rule 22    factor -> function_call
Rule 23    function_call -> VARIABLE LPAREN RPAREN
Rule 24    function_call -> VARIABLE LPAREN params RPAREN
Rule 25    params -> params COMMA expression
Rule 26    params -> expression
Rule 27    list -> LBRACKET contents RBRACKET
Rule 28    contents -> contents COMMA content
Rule 29    contents -> content
Rule 30    content -> expression
Rule 31    content -> list
Rule 32    list -> LBRACKET RBRACKET
Rule 33    expression -> VARIABLE LBRACKET subscript RBRACKET
Rule 34    subscript -> NUMBER
Rule 35    expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression
Rule 36    expression -> VARIABLE LBRACKET expression COLON expression RBRACKET

Terminals, with rules where they appear

COLON                : 36
COMMA                : 25 28
CONNECT              : 4 5
DIVIDE               : 15
EXP                  : 17
LBRACKET             : 27 32 33 35 36
LPAREN               : 7 19 23 24
MINUS                : 10
NUMBER               : 20 34
PLUS                 : 9
RBRACKET             : 27 32 33 35 36
RPAREN               : 7 19 23 24
SETTO                : 1 2 3 35
STRING               : 13
TIMES                : 14
VARIABLE             : 1 2 3 4 7 21 23 24 33 35 36
error                : 

Nonterminals, with rules where they appear

assignment           : 0
content              : 28 29
contents             : 27 28
exponent             : 14 15 16
expression           : 1 8 9 10 19 25 26 30 35 36 36
factor               : 17 17 18
flow                 : 3
flow_function_call   : 5 6
flow_functions       : 4 5
function_call        : 22
list                 : 2 31
params               : 7 24 25
string               : 12
subscript            : 33 35
term                 : 9 10 11 14 15

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . VARIABLE SETTO expression
    (2) assignment -> . VARIABLE SETTO list
    (3) assignment -> . VARIABLE SETTO flow
    (8) assignment -> . expression
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 2
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    assignment                     shift and go to state 1
    expression                     shift and go to state 3
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> VARIABLE . SETTO expression
    (2) assignment -> VARIABLE . SETTO list
    (3) assignment -> VARIABLE . SETTO flow
    (33) expression -> VARIABLE . LBRACKET subscript RBRACKET
    (35) expression -> VARIABLE . LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> VARIABLE . LBRACKET expression COLON expression RBRACKET
    (21) factor -> VARIABLE .
    (23) function_call -> VARIABLE . LPAREN RPAREN
    (24) function_call -> VARIABLE . LPAREN params RPAREN

    SETTO           shift and go to state 12
    LBRACKET        shift and go to state 13
    EXP             reduce using rule 21 (factor -> VARIABLE .)
    TIMES           reduce using rule 21 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 21 (factor -> VARIABLE .)
    PLUS            reduce using rule 21 (factor -> VARIABLE .)
    MINUS           reduce using rule 21 (factor -> VARIABLE .)
    $end            reduce using rule 21 (factor -> VARIABLE .)
    LPAREN          shift and go to state 14


state 3

    (8) assignment -> expression .
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    $end            reduce using rule 8 (assignment -> expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 4

    (11) expression -> term .
    (14) term -> term . TIMES exponent
    (15) term -> term . DIVIDE exponent

    PLUS            reduce using rule 11 (expression -> term .)
    MINUS           reduce using rule 11 (expression -> term .)
    $end            reduce using rule 11 (expression -> term .)
    RPAREN          reduce using rule 11 (expression -> term .)
    COLON           reduce using rule 11 (expression -> term .)
    COMMA           reduce using rule 11 (expression -> term .)
    RBRACKET        reduce using rule 11 (expression -> term .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 5

    (12) expression -> string .

    PLUS            reduce using rule 12 (expression -> string .)
    MINUS           reduce using rule 12 (expression -> string .)
    $end            reduce using rule 12 (expression -> string .)
    RPAREN          reduce using rule 12 (expression -> string .)
    COLON           reduce using rule 12 (expression -> string .)
    COMMA           reduce using rule 12 (expression -> string .)
    RBRACKET        reduce using rule 12 (expression -> string .)


state 6

    (16) term -> exponent .

    TIMES           reduce using rule 16 (term -> exponent .)
    DIVIDE          reduce using rule 16 (term -> exponent .)
    PLUS            reduce using rule 16 (term -> exponent .)
    MINUS           reduce using rule 16 (term -> exponent .)
    $end            reduce using rule 16 (term -> exponent .)
    RPAREN          reduce using rule 16 (term -> exponent .)
    COLON           reduce using rule 16 (term -> exponent .)
    COMMA           reduce using rule 16 (term -> exponent .)
    RBRACKET        reduce using rule 16 (term -> exponent .)


state 7

    (13) string -> STRING .

    PLUS            reduce using rule 13 (string -> STRING .)
    MINUS           reduce using rule 13 (string -> STRING .)
    $end            reduce using rule 13 (string -> STRING .)
    RPAREN          reduce using rule 13 (string -> STRING .)
    COLON           reduce using rule 13 (string -> STRING .)
    COMMA           reduce using rule 13 (string -> STRING .)
    RBRACKET        reduce using rule 13 (string -> STRING .)


state 8

    (17) exponent -> factor . EXP factor
    (18) exponent -> factor .

    EXP             shift and go to state 19
    TIMES           reduce using rule 18 (exponent -> factor .)
    DIVIDE          reduce using rule 18 (exponent -> factor .)
    PLUS            reduce using rule 18 (exponent -> factor .)
    MINUS           reduce using rule 18 (exponent -> factor .)
    $end            reduce using rule 18 (exponent -> factor .)
    RPAREN          reduce using rule 18 (exponent -> factor .)
    COLON           reduce using rule 18 (exponent -> factor .)
    COMMA           reduce using rule 18 (exponent -> factor .)
    RBRACKET        reduce using rule 18 (exponent -> factor .)


state 9

    (19) exponent -> LPAREN . expression RPAREN
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 20
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 10

    (20) factor -> NUMBER .

    EXP             reduce using rule 20 (factor -> NUMBER .)
    TIMES           reduce using rule 20 (factor -> NUMBER .)
    DIVIDE          reduce using rule 20 (factor -> NUMBER .)
    PLUS            reduce using rule 20 (factor -> NUMBER .)
    MINUS           reduce using rule 20 (factor -> NUMBER .)
    $end            reduce using rule 20 (factor -> NUMBER .)
    RPAREN          reduce using rule 20 (factor -> NUMBER .)
    COMMA           reduce using rule 20 (factor -> NUMBER .)
    COLON           reduce using rule 20 (factor -> NUMBER .)
    RBRACKET        reduce using rule 20 (factor -> NUMBER .)


state 11

    (22) factor -> function_call .

    EXP             reduce using rule 22 (factor -> function_call .)
    TIMES           reduce using rule 22 (factor -> function_call .)
    DIVIDE          reduce using rule 22 (factor -> function_call .)
    PLUS            reduce using rule 22 (factor -> function_call .)
    MINUS           reduce using rule 22 (factor -> function_call .)
    $end            reduce using rule 22 (factor -> function_call .)
    RPAREN          reduce using rule 22 (factor -> function_call .)
    COLON           reduce using rule 22 (factor -> function_call .)
    COMMA           reduce using rule 22 (factor -> function_call .)
    RBRACKET        reduce using rule 22 (factor -> function_call .)


state 12

    (1) assignment -> VARIABLE SETTO . expression
    (2) assignment -> VARIABLE SETTO . list
    (3) assignment -> VARIABLE SETTO . flow
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (27) list -> . LBRACKET contents RBRACKET
    (32) list -> . LBRACKET RBRACKET
    (4) flow -> . VARIABLE CONNECT flow_functions
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 22
    LBRACKET        shift and go to state 26
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 23
    list                           shift and go to state 24
    flow                           shift and go to state 25
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 13

    (33) expression -> VARIABLE LBRACKET . subscript RBRACKET
    (35) expression -> VARIABLE LBRACKET . subscript RBRACKET SETTO expression
    (36) expression -> VARIABLE LBRACKET . expression COLON expression RBRACKET
    (34) subscript -> . NUMBER
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 29
    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9

    subscript                      shift and go to state 27
    expression                     shift and go to state 28
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 14

    (23) function_call -> VARIABLE LPAREN . RPAREN
    (24) function_call -> VARIABLE LPAREN . params RPAREN
    (25) params -> . params COMMA expression
    (26) params -> . expression
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    RPAREN          shift and go to state 30
    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    params                         shift and go to state 31
    expression                     shift and go to state 32
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 15

    (9) expression -> expression PLUS . term
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 34

    term                           shift and go to state 33
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 16

    (10) expression -> expression MINUS . term
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 34

    term                           shift and go to state 35
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 17

    (14) term -> term TIMES . exponent
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 34

    exponent                       shift and go to state 36
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 18

    (15) term -> term DIVIDE . exponent
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 34

    exponent                       shift and go to state 37
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 19

    (17) exponent -> factor EXP . factor
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 10
    VARIABLE        shift and go to state 34

    factor                         shift and go to state 38
    function_call                  shift and go to state 11

state 20

    (19) exponent -> LPAREN expression . RPAREN
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    RPAREN          shift and go to state 39
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 21

    (33) expression -> VARIABLE . LBRACKET subscript RBRACKET
    (35) expression -> VARIABLE . LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> VARIABLE . LBRACKET expression COLON expression RBRACKET
    (21) factor -> VARIABLE .
    (23) function_call -> VARIABLE . LPAREN RPAREN
    (24) function_call -> VARIABLE . LPAREN params RPAREN

    LBRACKET        shift and go to state 13
    EXP             reduce using rule 21 (factor -> VARIABLE .)
    TIMES           reduce using rule 21 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 21 (factor -> VARIABLE .)
    RPAREN          reduce using rule 21 (factor -> VARIABLE .)
    PLUS            reduce using rule 21 (factor -> VARIABLE .)
    MINUS           reduce using rule 21 (factor -> VARIABLE .)
    COLON           reduce using rule 21 (factor -> VARIABLE .)
    COMMA           reduce using rule 21 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 21 (factor -> VARIABLE .)
    $end            reduce using rule 21 (factor -> VARIABLE .)
    LPAREN          shift and go to state 14


state 22

    (33) expression -> VARIABLE . LBRACKET subscript RBRACKET
    (35) expression -> VARIABLE . LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> VARIABLE . LBRACKET expression COLON expression RBRACKET
    (4) flow -> VARIABLE . CONNECT flow_functions
    (21) factor -> VARIABLE .
    (23) function_call -> VARIABLE . LPAREN RPAREN
    (24) function_call -> VARIABLE . LPAREN params RPAREN

    LBRACKET        shift and go to state 13
    CONNECT         shift and go to state 40
    EXP             reduce using rule 21 (factor -> VARIABLE .)
    TIMES           reduce using rule 21 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 21 (factor -> VARIABLE .)
    PLUS            reduce using rule 21 (factor -> VARIABLE .)
    MINUS           reduce using rule 21 (factor -> VARIABLE .)
    $end            reduce using rule 21 (factor -> VARIABLE .)
    LPAREN          shift and go to state 14


state 23

    (1) assignment -> VARIABLE SETTO expression .
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    $end            reduce using rule 1 (assignment -> VARIABLE SETTO expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 24

    (2) assignment -> VARIABLE SETTO list .

    $end            reduce using rule 2 (assignment -> VARIABLE SETTO list .)


state 25

    (3) assignment -> VARIABLE SETTO flow .

    $end            reduce using rule 3 (assignment -> VARIABLE SETTO flow .)


state 26

    (27) list -> LBRACKET . contents RBRACKET
    (32) list -> LBRACKET . RBRACKET
    (28) contents -> . contents COMMA content
    (29) contents -> . content
    (30) content -> . expression
    (31) content -> . list
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (27) list -> . LBRACKET contents RBRACKET
    (32) list -> . LBRACKET RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    RBRACKET        shift and go to state 42
    VARIABLE        shift and go to state 21
    LBRACKET        shift and go to state 26
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    contents                       shift and go to state 41
    content                        shift and go to state 43
    expression                     shift and go to state 44
    list                           shift and go to state 45
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 27

    (33) expression -> VARIABLE LBRACKET subscript . RBRACKET
    (35) expression -> VARIABLE LBRACKET subscript . RBRACKET SETTO expression

    RBRACKET        shift and go to state 46


state 28

    (36) expression -> VARIABLE LBRACKET expression . COLON expression RBRACKET
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    COLON           shift and go to state 47
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 29

    (34) subscript -> NUMBER .
    (20) factor -> NUMBER .

    RBRACKET        reduce using rule 34 (subscript -> NUMBER .)
    EXP             reduce using rule 20 (factor -> NUMBER .)
    TIMES           reduce using rule 20 (factor -> NUMBER .)
    DIVIDE          reduce using rule 20 (factor -> NUMBER .)
    COLON           reduce using rule 20 (factor -> NUMBER .)
    PLUS            reduce using rule 20 (factor -> NUMBER .)
    MINUS           reduce using rule 20 (factor -> NUMBER .)


state 30

    (23) function_call -> VARIABLE LPAREN RPAREN .

    EXP             reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    DIVIDE          reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    COLON           reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)
    RBRACKET        reduce using rule 23 (function_call -> VARIABLE LPAREN RPAREN .)


state 31

    (24) function_call -> VARIABLE LPAREN params . RPAREN
    (25) params -> params . COMMA expression

    RPAREN          shift and go to state 48
    COMMA           shift and go to state 49


state 32

    (26) params -> expression .
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    RPAREN          reduce using rule 26 (params -> expression .)
    COMMA           reduce using rule 26 (params -> expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 33

    (9) expression -> expression PLUS term .
    (14) term -> term . TIMES exponent
    (15) term -> term . DIVIDE exponent

    PLUS            reduce using rule 9 (expression -> expression PLUS term .)
    MINUS           reduce using rule 9 (expression -> expression PLUS term .)
    $end            reduce using rule 9 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 9 (expression -> expression PLUS term .)
    COLON           reduce using rule 9 (expression -> expression PLUS term .)
    COMMA           reduce using rule 9 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 9 (expression -> expression PLUS term .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 34

    (21) factor -> VARIABLE .
    (23) function_call -> VARIABLE . LPAREN RPAREN
    (24) function_call -> VARIABLE . LPAREN params RPAREN

    EXP             reduce using rule 21 (factor -> VARIABLE .)
    TIMES           reduce using rule 21 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 21 (factor -> VARIABLE .)
    PLUS            reduce using rule 21 (factor -> VARIABLE .)
    MINUS           reduce using rule 21 (factor -> VARIABLE .)
    $end            reduce using rule 21 (factor -> VARIABLE .)
    RPAREN          reduce using rule 21 (factor -> VARIABLE .)
    COLON           reduce using rule 21 (factor -> VARIABLE .)
    COMMA           reduce using rule 21 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 21 (factor -> VARIABLE .)
    LPAREN          shift and go to state 14


state 35

    (10) expression -> expression MINUS term .
    (14) term -> term . TIMES exponent
    (15) term -> term . DIVIDE exponent

    PLUS            reduce using rule 10 (expression -> expression MINUS term .)
    MINUS           reduce using rule 10 (expression -> expression MINUS term .)
    $end            reduce using rule 10 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 10 (expression -> expression MINUS term .)
    COLON           reduce using rule 10 (expression -> expression MINUS term .)
    COMMA           reduce using rule 10 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 10 (expression -> expression MINUS term .)
    TIMES           shift and go to state 17
    DIVIDE          shift and go to state 18


state 36

    (14) term -> term TIMES exponent .

    TIMES           reduce using rule 14 (term -> term TIMES exponent .)
    DIVIDE          reduce using rule 14 (term -> term TIMES exponent .)
    PLUS            reduce using rule 14 (term -> term TIMES exponent .)
    MINUS           reduce using rule 14 (term -> term TIMES exponent .)
    $end            reduce using rule 14 (term -> term TIMES exponent .)
    RPAREN          reduce using rule 14 (term -> term TIMES exponent .)
    COLON           reduce using rule 14 (term -> term TIMES exponent .)
    COMMA           reduce using rule 14 (term -> term TIMES exponent .)
    RBRACKET        reduce using rule 14 (term -> term TIMES exponent .)


state 37

    (15) term -> term DIVIDE exponent .

    TIMES           reduce using rule 15 (term -> term DIVIDE exponent .)
    DIVIDE          reduce using rule 15 (term -> term DIVIDE exponent .)
    PLUS            reduce using rule 15 (term -> term DIVIDE exponent .)
    MINUS           reduce using rule 15 (term -> term DIVIDE exponent .)
    $end            reduce using rule 15 (term -> term DIVIDE exponent .)
    RPAREN          reduce using rule 15 (term -> term DIVIDE exponent .)
    COLON           reduce using rule 15 (term -> term DIVIDE exponent .)
    COMMA           reduce using rule 15 (term -> term DIVIDE exponent .)
    RBRACKET        reduce using rule 15 (term -> term DIVIDE exponent .)


state 38

    (17) exponent -> factor EXP factor .

    TIMES           reduce using rule 17 (exponent -> factor EXP factor .)
    DIVIDE          reduce using rule 17 (exponent -> factor EXP factor .)
    PLUS            reduce using rule 17 (exponent -> factor EXP factor .)
    MINUS           reduce using rule 17 (exponent -> factor EXP factor .)
    $end            reduce using rule 17 (exponent -> factor EXP factor .)
    RPAREN          reduce using rule 17 (exponent -> factor EXP factor .)
    COLON           reduce using rule 17 (exponent -> factor EXP factor .)
    COMMA           reduce using rule 17 (exponent -> factor EXP factor .)
    RBRACKET        reduce using rule 17 (exponent -> factor EXP factor .)


state 39

    (19) exponent -> LPAREN expression RPAREN .

    TIMES           reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    COLON           reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 19 (exponent -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 19 (exponent -> LPAREN expression RPAREN .)


state 40

    (4) flow -> VARIABLE CONNECT . flow_functions
    (5) flow_functions -> . flow_function_call CONNECT flow_functions
    (6) flow_functions -> . flow_function_call
    (7) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 50

    flow_functions                 shift and go to state 51
    flow_function_call             shift and go to state 52

state 41

    (27) list -> LBRACKET contents . RBRACKET
    (28) contents -> contents . COMMA content

    RBRACKET        shift and go to state 53
    COMMA           shift and go to state 54


state 42

    (32) list -> LBRACKET RBRACKET .

    $end            reduce using rule 32 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 32 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 32 (list -> LBRACKET RBRACKET .)


state 43

    (29) contents -> content .

    RBRACKET        reduce using rule 29 (contents -> content .)
    COMMA           reduce using rule 29 (contents -> content .)


state 44

    (30) content -> expression .
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    RBRACKET        reduce using rule 30 (content -> expression .)
    COMMA           reduce using rule 30 (content -> expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 45

    (31) content -> list .

    RBRACKET        reduce using rule 31 (content -> list .)
    COMMA           reduce using rule 31 (content -> list .)


state 46

    (33) expression -> VARIABLE LBRACKET subscript RBRACKET .
    (35) expression -> VARIABLE LBRACKET subscript RBRACKET . SETTO expression

    PLUS            reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    MINUS           reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    $end            reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    RPAREN          reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    COLON           reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    COMMA           reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    RBRACKET        reduce using rule 33 (expression -> VARIABLE LBRACKET subscript RBRACKET .)
    SETTO           shift and go to state 55


state 47

    (36) expression -> VARIABLE LBRACKET expression COLON . expression RBRACKET
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 56
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 48

    (24) function_call -> VARIABLE LPAREN params RPAREN .

    EXP             reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    TIMES           reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    DIVIDE          reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    PLUS            reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    MINUS           reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    RPAREN          reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    COLON           reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    COMMA           reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)
    RBRACKET        reduce using rule 24 (function_call -> VARIABLE LPAREN params RPAREN .)


state 49

    (25) params -> params COMMA . expression
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 57
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 50

    (7) flow_function_call -> VARIABLE . LPAREN params RPAREN

    LPAREN          shift and go to state 58


state 51

    (4) flow -> VARIABLE CONNECT flow_functions .

    $end            reduce using rule 4 (flow -> VARIABLE CONNECT flow_functions .)


state 52

    (5) flow_functions -> flow_function_call . CONNECT flow_functions
    (6) flow_functions -> flow_function_call .

    CONNECT         shift and go to state 59
    $end            reduce using rule 6 (flow_functions -> flow_function_call .)


state 53

    (27) list -> LBRACKET contents RBRACKET .

    $end            reduce using rule 27 (list -> LBRACKET contents RBRACKET .)
    RBRACKET        reduce using rule 27 (list -> LBRACKET contents RBRACKET .)
    COMMA           reduce using rule 27 (list -> LBRACKET contents RBRACKET .)


state 54

    (28) contents -> contents COMMA . content
    (30) content -> . expression
    (31) content -> . list
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (27) list -> . LBRACKET contents RBRACKET
    (32) list -> . LBRACKET RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    LBRACKET        shift and go to state 26
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    content                        shift and go to state 60
    expression                     shift and go to state 44
    list                           shift and go to state 45
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 55

    (35) expression -> VARIABLE LBRACKET subscript RBRACKET SETTO . expression
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 61
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 56

    (36) expression -> VARIABLE LBRACKET expression COLON expression . RBRACKET
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    RBRACKET        shift and go to state 62
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 57

    (25) params -> params COMMA expression .
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

    RPAREN          reduce using rule 25 (params -> params COMMA expression .)
    COMMA           reduce using rule 25 (params -> params COMMA expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 58

    (7) flow_function_call -> VARIABLE LPAREN . params RPAREN
    (25) params -> . params COMMA expression
    (26) params -> . expression
    (9) expression -> . expression PLUS term
    (10) expression -> . expression MINUS term
    (11) expression -> . term
    (12) expression -> . string
    (33) expression -> . VARIABLE LBRACKET subscript RBRACKET
    (35) expression -> . VARIABLE LBRACKET subscript RBRACKET SETTO expression
    (36) expression -> . VARIABLE LBRACKET expression COLON expression RBRACKET
    (14) term -> . term TIMES exponent
    (15) term -> . term DIVIDE exponent
    (16) term -> . exponent
    (13) string -> . STRING
    (17) exponent -> . factor EXP factor
    (18) exponent -> . factor
    (19) exponent -> . LPAREN expression RPAREN
    (20) factor -> . NUMBER
    (21) factor -> . VARIABLE
    (22) factor -> . function_call
    (23) function_call -> . VARIABLE LPAREN RPAREN
    (24) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    STRING          shift and go to state 7
    LPAREN          shift and go to state 9
    NUMBER          shift and go to state 10

    params                         shift and go to state 63
    expression                     shift and go to state 32
    term                           shift and go to state 4
    string                         shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 59

    (5) flow_functions -> flow_function_call CONNECT . flow_functions
    (5) flow_functions -> . flow_function_call CONNECT flow_functions
    (6) flow_functions -> . flow_function_call
    (7) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 50

    flow_function_call             shift and go to state 52
    flow_functions                 shift and go to state 64

state 60

    (28) contents -> contents COMMA content .

    RBRACKET        reduce using rule 28 (contents -> contents COMMA content .)
    COMMA           reduce using rule 28 (contents -> contents COMMA content .)


state 61

    (35) expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .
    (9) expression -> expression . PLUS term
    (10) expression -> expression . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .)
    RPAREN          reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .)
    COLON           reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .)
    COMMA           reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .)
    RBRACKET        reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16

  ! PLUS            [ reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> VARIABLE LBRACKET subscript RBRACKET SETTO expression .) ]


state 62

    (36) expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .

    PLUS            reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    $end            reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 36 (expression -> VARIABLE LBRACKET expression COLON expression RBRACKET .)


state 63

    (7) flow_function_call -> VARIABLE LPAREN params . RPAREN
    (25) params -> params . COMMA expression

    RPAREN          shift and go to state 65
    COMMA           shift and go to state 49


state 64

    (5) flow_functions -> flow_function_call CONNECT flow_functions .

    $end            reduce using rule 5 (flow_functions -> flow_function_call CONNECT flow_functions .)


state 65

    (7) flow_function_call -> VARIABLE LPAREN params RPAREN .

    CONNECT         reduce using rule 7 (flow_function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 7 (flow_function_call -> VARIABLE LPAREN params RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
